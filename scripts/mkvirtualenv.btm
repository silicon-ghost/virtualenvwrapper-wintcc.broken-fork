@echo off
if "%@eval[2 + 2]%" == "4" goto TCC
echo.
echo.  This script requires Take Command/TCC to run.
goto END

:TCC

if [%1]==[] goto USAGE
goto MKVIRTUALENV

:USAGE
echo.
echo.    Pass a name to create a new virtualenv
goto END

:MKVIRTUALENV
if not defined WORKON_HOME (
    set "WORKON_HOME=%USERPROFILE%\Envs"
)

if defined VIRTUAL_ENV (
    call "%VIRTUAL_ENV%\Scripts\deactivate.bat" 
)

iff defined PYTHONHOME then
    set "PYHOME=%PYTHONHOME%"
else
    set PYHOME=%@EXECSTR[python.exe -c "import sys;print(sys.exec_prefix)"]
endiff

:MAIN
REM Copy all arguments, then set ENVNAME to the last argument
set "ARGS=%*"
call :GET_ENVNAME %*

if not direxist "%WORKON_HOME%" (
    mkdir "%WORKON_HOME%"
)

iff direxist "%WORKON_HOME%\%ENVNAME%" then
    echo.
    echo.    virtualenv "%ENVNAME%" already exists
    goto END
endiff

pushd "%WORKON_HOME%"
REM As of Python 2.7, calling virtualenv.exe causes a new window to open,
REM so call the script directly
REM virtualenv.exe %*
python.exe "%PYHOME%\Scripts\virtualenv-script.py" %ARGS%
popd
if errorlevel 2 goto END

REM In activate.bat, keep track of PYTHONPATH.
REM This should be a change adopted by virtualenv.
text >> "%WORKON_HOME%\%ENVNAME%\Scripts\activate.bat"
:: In case user makes changes to PYTHONPATH
if defined _OLD_VIRTUAL_PYTHONPATH (
    set "PYTHONPATH=%_OLD_VIRTUAL_PYTHONPATH%"
) else (
    set "_OLD_VIRTUAL_PYTHONPATH=%PYTHONPATH%"
)
endtext

REM In deactivate.bat, reset PYTHONPATH to its former value
text >> "%WORKON_HOME%\%ENVNAME%\Scripts\deactivate.bat" 

if defined _OLD_VIRTUAL_PYTHONPATH (
    set "PYTHONPATH=%_OLD_VIRTUAL_PYTHONPATH%"
    set _OLD_VIRTUAL_PYTHONPATH=
)
endtext

call "%WORKON_HOME%\%ENVNAME%\Scripts\activate.bat"
goto END

:GET_ENVNAME
  set "ENVNAME=%~1"
  shift
  if not "%~1"=="" goto GET_ENVNAME
goto :eof

:END
set PYHOME=
set ENVNAME=